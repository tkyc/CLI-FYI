################################
Misc.
################################
- css filter to set dark mode for pdfs on firefox
viewer.style = 'filter: grayscale(1) invert(1) sepia(1)'


################################
python
################################
- set up venv
pip install pipenv
mkdir your-dir
cd your-dir
pipenv --python python3 || pipenv install (uses default python version)

pipenv shell (turn on virtual environment)
pipenv install || pipenv install -r requirements.txt (install project dependencies) 
pipenv update (update packages)
pipenv install your-package
pip freeze (see installed dependencies)

- solution to importing sibling directories (need to use virutal environment)
1. create setup.py in root of project

content of setup.py is the following:
from setuptools import setup, find_packages
setup(name='myproject', version='1.0', packages=find_packages())

2. pipenv install -e . (-e switch will make files editable)

- create egg/zip file
python setup.py bdist_egg

- use kivy for gui
- #include <python3.7m/Python.h> for extending python using C 


################################
Linux
################################
- temporarily resize tmp to 8 gigs
sudo mount -o remount,size=8G,noatime /tmp;

- text extraction
awk 'FNR == <row> {print $<col>}'
awk '/<regex>/'

- system info
hostnamectl


################################
React
################################
- use live-server to run proj & listent to changes
live-server folder-containing-proj-files

- initialize project
yarn init

- add babel dependencies
yarn add babel-preset-react babel-preset-env

- start babel and listens for changes (read jsx in src/app.js and write to output file in public/scripts/app.js) 
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch


################################
React-Native
################################
- Using expo-cli to init project
expo init project-name

- Using expo to launch project
expo start

- Convert expo project to classic React-Native project with Android/iOS native files
expo eject

- View Android logs
react-native log-android

- Run project on android (Must launch project first with npm start)
react-native run-android


################################
Dotnet Core
################################
- Restore/install project dependencies (not necessary to run b/c it is implicitly ran on build)
dotnet restore

- Start project in output directory
dotnet new <template> -o <directoyr>

- Build project
dotnet build


################################
Rust
################################
cargo new <proj>

cargo build

- Create executable for the compile target
cargo build --release --target=<compile-target>

cargo run

cargo test

- Lists compile targets
rustup target list

- Add compile target
rustup target add <complie-target>

rustup install stable

rustup update


################################
Docker
################################
- Build image from Dockerfile
docker build -t <repo>/<image-name>:<tab> -f Dockerfile .

- Run image in background and interactively
docker run -d -it <image-id>

- Use the container's shell
docker exec -it <container-id> /bin/bash


################################
AUR
################################
makepkg -sirc
